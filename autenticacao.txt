package com.nataliaarantes.iftm.config;

import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import com.nataliaarantes.iftm.model.User;
import com.nataliaarantes.iftm.repository.UserRepository;
import com.nataliaarantes.iftm.service.TokenService;

@Component
public class OAuth2AuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {
    
    private final TokenService tokenService;
    private final UserRepository userRepository;
    
    public OAuth2AuthenticationSuccessHandler(TokenService tokenService) {
        this.tokenService = tokenService;
        this.userRepository = userRepository;
    }
    
    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
                                      Authentication authentication) throws IOException {
        OAuth2User oauth2User = (OAuth2User) authentication.getPrincipal();
        String email = oauth2User.getAttribute("email");
        
        // Gera token JWT
        User user = userRepository.findByEmail(email)
            .orElseThrow(() -> new RuntimeException("Usuário não encontrado"));
        String token = tokenService.generateToken(user);
        
        // Envia token na resposta
        response.setContentType("application/json");
        response.getWriter().write("{\"token\":\"" + token + "\"}");
    }
}
package com.nataliaarantes.iftm.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

  @Autowired
  SecurityFilter securityFilter;

  @Autowired
  OAuth2UserService oAuth2UserService;

  @Bean
  public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
    return httpSecurity
        .csrf(AbstractHttpConfigurer::disable)
        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
        .authorizeHttpRequests(authorize -> authorize
            .requestMatchers(HttpMethod.POST, "/auth/login").permitAll()
            .requestMatchers(HttpMethod.POST, "/auth/register").permitAll()
            .requestMatchers(HttpMethod.POST, "/auth/validateToken").permitAll()
            .requestMatchers("/oauth2/**").permitAll()
            .requestMatchers("/login/**").permitAll()
            .requestMatchers(HttpMethod.POST, "/classroom").hasRole("ADMIN")
            .requestMatchers(HttpMethod.PUT, "/classroom").hasRole("ADMIN")
            .requestMatchers(HttpMethod.DELETE, "/classroom").hasRole("ADMIN")
            .anyRequest().authenticated()
        )
        .oauth2Login(oauth2 -> oauth2
            .userInfoEndpoint(userInfo -> userInfo
                .userService(oAuth2UserService)
            )
            .successHandler(new OAuth2AuthenticationSuccessHandler(tokenService))
        )
        .addFilterBefore(securityFilter, UsernamePasswordAuthenticationFilter.class)
        .build();
  }

  

  @Bean
  public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
    return authenticationConfiguration.getAuthenticationManager();
  }

  @Bean
  public PasswordEncoder passwordEncoder(){
    return new BCryptPasswordEncoder();
  }
}

package com.nataliaarantes.iftm.config;

import com.nataliaarantes.iftm.repository.UserRepository;
import com.nataliaarantes.iftm.service.TokenService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatusCode;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class SecurityFilter extends OncePerRequestFilter {
  @Autowired
  TokenService tokenService;

  @Autowired
  UserRepository userRepository;

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
    var token = this.recoverToken(request);
    if(token != null){
      var login = tokenService.validateToken(token);
      UserDetails user = userRepository.findByEmail(login)
          .orElseThrow(() -> new HttpClientErrorException(HttpStatusCode.valueOf(404), "User not found"));

      var authentication = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
      SecurityContextHolder.getContext().setAuthentication(authentication);
    }
    filterChain.doFilter(request, response);
  }

  private String recoverToken(HttpServletRequest request){
    var authHeader = request.getHeader("Authorization");
    if(authHeader == null) return null;
    return authHeader.replace("Bearer ", "");
  }
}

package com.nataliaarantes.iftm.controller;


import com.nataliaarantes.iftm.model.dto.token.ValidateTokenDTO;
import com.nataliaarantes.iftm.model.dto.login.LoginDTO;
import com.nataliaarantes.iftm.model.dto.login.LoginResponseDTO;
import com.nataliaarantes.iftm.model.dto.register.RegisterDTO;
import com.nataliaarantes.iftm.model.dto.register.RegisterResponseDTO;
import com.nataliaarantes.iftm.service.AuthorizationService;
import com.nataliaarantes.iftm.service.TokenService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Objects;

@RestController
@RequestMapping("auth")
public class AuthorizationController {

  @Autowired
  private AuthorizationService authorizationService;

  @Autowired
  private TokenService tokenService;


  @PostMapping("/login")
  public ResponseEntity<LoginResponseDTO> login(@RequestBody LoginDTO requestBody){
    var response = authorizationService.login(requestBody);
    return new ResponseEntity<>(response, HttpStatusCode.valueOf(200));
  }

  @PostMapping("/register")
  public ResponseEntity<RegisterResponseDTO> register(@RequestBody RegisterDTO requestBody){
    var response = authorizationService.register(requestBody);
    return new ResponseEntity<>(response, HttpStatusCode.valueOf(201));
  }

  @PostMapping("/validateToken")
  public ResponseEntity<Boolean> validateToken(@RequestBody ValidateTokenDTO validateTokenDTO) {
    var response = tokenService.validateToken(validateTokenDTO.getToken());
    var isValid = !Objects.equals(response, "");

    return new ResponseEntity<>(isValid, HttpStatusCode.valueOf(200));
  }
}
package com.nataliaarantes.iftm.controller;

import com.nataliaarantes.iftm.model.dto.classroom.ClassroomDTO;
import com.nataliaarantes.iftm.model.dto.classroom.ClassroomResponseDTO;
import com.nataliaarantes.iftm.service.ClassroomService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("classroom")
public class ClassroomController {

  @Autowired
  private ClassroomService classroomService;

  @PostMapping
  public ResponseEntity<ClassroomResponseDTO> create(@RequestBody ClassroomDTO requestBody) {
    var response = classroomService.create(requestBody);
    return new ResponseEntity<ClassroomResponseDTO>(response, HttpStatusCode.valueOf(201));
  }

  @GetMapping
  public ResponseEntity<List<ClassroomResponseDTO>> findAll() {
    var response = classroomService.findAll();
    return new ResponseEntity<List<ClassroomResponseDTO>>(response, HttpStatusCode.valueOf(200));
  }

  @GetMapping("/{id}")
  public ResponseEntity<ClassroomResponseDTO> findByUuid(@PathVariable String id) {
    var response = classroomService.findByUuid(id);
    return new ResponseEntity<ClassroomResponseDTO>(response, HttpStatusCode.valueOf(200));
  }

  @PutMapping("/{id}")
  public ResponseEntity<ClassroomResponseDTO> update(
      @PathVariable String id,
      @RequestBody ClassroomDTO dto
  ) {
    var response = classroomService.update(id, dto);
    return new ResponseEntity<ClassroomResponseDTO>(response, HttpStatusCode.valueOf(200));
  }

  @DeleteMapping("/{id}")
  public ResponseEntity<Void> delete(@PathVariable String id) {
    classroomService.delete(id);
    return new ResponseEntity<Void>(HttpStatusCode.valueOf(204));
  }
}
package com.nataliaarantes.iftm.controller;

import com.nataliaarantes.iftm.model.dto.user.UserDTO;
import com.nataliaarantes.iftm.model.dto.user.UserResponseDTO;
import com.nataliaarantes.iftm.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/user")
public class UserController {

  @Autowired
  UserService userService;


  @PutMapping
  public ResponseEntity<UserResponseDTO> update(@RequestBody UserDTO requestBody,
                                                @RequestHeader("Authorization") String token) {
    var response = userService.update(requestBody, token);
    return new ResponseEntity<UserResponseDTO>(response, HttpStatusCode.valueOf(200));
  }
}
package com.nataliaarantes.iftm.model.dto.classroom;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class ClassroomDTO {
  private String name;
  private String year;
}
package com.nataliaarantes.iftm.model.dto.classroom;

import com.nataliaarantes.iftm.model.Classroom;
import com.nataliaarantes.iftm.model.dto.user.Student.StudentResponseDTO;
import lombok.*;

import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@With
public class ClassroomResponseDTO {
  private String uuid;
  private String name;
  private String year;
  private boolean isActive;
  private List<StudentResponseDTO> students;


  public static ClassroomResponseDTO modelToResponseDto(Classroom model) {
    return ClassroomResponseDTO.builder()
        .uuid(model.getUuid())
        .name(model.getName())
        .year(model.getYear())
        .isActive(model.isActive())
        .build();
  }
}
package com.nataliaarantes.iftm.model.dto.login;

import lombok.Data;

@Data
public class LoginDTO {
  private String email;
  private String password;
}
package com.nataliaarantes.iftm.model.dto.login;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class LoginResponseDTO {
  private String token;
}
package com.nataliaarantes.iftm.model.dto.register;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.With;

@Data
@With
@AllArgsConstructor
@NoArgsConstructor
public class RegisterDTO {
  private String name;
  private String email;
  private String password;
  private boolean isTeacher;
  private String classId;
}
package com.nataliaarantes.iftm.model.dto.register;

import lombok.*;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class RegisterResponseDTO {
  private String uuid;
  private boolean isTeacher;
  private String email;
  private String name;
}
package com.nataliaarantes.iftm.model.dto.token;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ValidateTokenDTO {
  private String token;
}
package com.nataliaarantes.iftm.model.dto.user.Student;

import com.nataliaarantes.iftm.model.Student;
import com.nataliaarantes.iftm.model.dto.user.UserResponseDTO;
import lombok.*;

@Getter
@Setter
public class StudentResponseDTO extends UserResponseDTO {
  public StudentResponseDTO(String uuid, String name, String email, boolean isActive, String classId) {
    super(uuid, name, email, isActive);
    this.classId = classId;
  }

  private String classId;

  public static StudentResponseDTO modelToDto(Student model) {
    return new StudentResponseDTO(
        model.getUuid(),
        model.getName(),
        model.getEmail(),
        model.isActive(),
        model.getClassId()
    );
  }
}

package com.nataliaarantes.iftm.model.dto.user.Teacher;

import com.nataliaarantes.iftm.model.Teacher;
import com.nataliaarantes.iftm.model.dto.user.UserResponseDTO;

public class TeacherResponseDTO extends UserResponseDTO {
  public TeacherResponseDTO(String uuid, String name, String email, boolean isActive) {
    super(uuid, name, email, isActive);
  }

  public static TeacherResponseDTO modelToDto(Teacher model) {
    return new TeacherResponseDTO(
        model.getUuid(),
        model.getName(),
        model.getEmail(),
        model.isActive()
    );
  }
}
package com.nataliaarantes.iftm.model.dto.user;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserDTO {
  private String email;
  private String password;
  private String name;
  private String classId;
}
package com.nataliaarantes.iftm.model.dto.user;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Getter
public class UserResponseDTO {
  private String uuid;
  private String name;
  private String email;
  private boolean isActive;

}
package com.nataliaarantes.iftm.model;

import com.nataliaarantes.iftm.model.dto.classroom.ClassroomDTO;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;

@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "classroms")
public class Classroom {
  @Id
  private String uuid;

  @Field("name")
  private String name;

  @Field("year")
  private String year;

  @Field("is_active")
  private boolean isActive;


  public static Classroom dtoToMode(ClassroomDTO dto) {
    return Classroom.builder()
        .name(dto.getName())
        .year(dto.getYear())
        .isActive(true)
        .build();
  }
}
package com.nataliaarantes.iftm.model;

import lombok.*;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import java.util.Collection;
import java.util.List;

@EqualsAndHashCode(callSuper = true)
@Document(collection = "users")
@Getter
@Setter
public class Student extends User {
  public Student(String name, String email, String password, Boolean isActive, String classId) {
    super(name, email, password, isActive);
    this.classId = classId;
  }

  @Field("class_id")
  private String classId;

  @Override
  public Collection<? extends GrantedAuthority> getAuthorities() {
    return List.of(new SimpleGrantedAuthority("ROLE_USER"));
  }
}
package com.nataliaarantes.iftm.model;

import lombok.*;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import java.util.Collection;
import java.util.List;

@EqualsAndHashCode(callSuper = true)
@Document(collection = "users")
@Getter
@Setter
public class Teacher extends User {

  public Teacher(String name, String email, String password, Boolean isActive) {
    super(name, email, password, isActive);
  }

  @Override
  public Collection<? extends GrantedAuthority> getAuthorities() {

    return List.of(
        new SimpleGrantedAuthority("ROLE_ADMIN"),
        new SimpleGrantedAuthority("ROLE_USER")
    );
  }
}package com.nataliaarantes.iftm.model;

import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.Collection;

@Getter
@Setter
@Document(collection = "users")
public abstract class User implements UserDetails {

  public User(String name, String email, String password, Boolean isActive) {
    this.name = name;
    this.email = email;
    this.password = password;
    this.isActive = isActive != null ? isActive : true;
  }

  @Id
  private String uuid;

  @Field("name")
  private String name;

  @Field("email")
  @Indexed(unique = true)
  private String email;

  @Field("password")
  private String password;

  @Field("is_active")
  private boolean isActive;

  @Override
  public String getPassword() {
    return this.password;
  }

  @Override
  public String getUsername() {
    return this.email;
  }

  @Override
  public boolean isAccountNonExpired() {
    return true;
  }

  @Override
  public boolean isAccountNonLocked() {
    return true;
  }

  @Override
  public boolean isCredentialsNonExpired() {
    return true;
  }

  @Override
  public boolean isEnabled() {
    return this.isActive;
  }
}
package com.nataliaarantes.iftm.repository;

import com.nataliaarantes.iftm.model.Classroom;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface ClassroomRepository extends MongoRepository<Classroom, String> {
  Optional<Classroom> findByUuid(String uuid);
  Optional<Classroom> findByName(String name);
}
package com.nataliaarantes.iftm.repository;

import com.nataliaarantes.iftm.model.Student;
import com.nataliaarantes.iftm.model.User;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends MongoRepository<User, String> {
  Optional<User> findByEmail(String email);
  List<Student> findByClassId(String classId);
}
package com.nataliaarantes.iftm.service;

import com.nataliaarantes.iftm.model.Student;
import com.nataliaarantes.iftm.model.Teacher;
import com.nataliaarantes.iftm.model.User;
import com.nataliaarantes.iftm.model.dto.login.LoginDTO;
import com.nataliaarantes.iftm.model.dto.login.LoginResponseDTO;
import com.nataliaarantes.iftm.model.dto.register.RegisterDTO;
import com.nataliaarantes.iftm.model.dto.register.RegisterResponseDTO;
import com.nataliaarantes.iftm.repository.ClassroomRepository;
import com.nataliaarantes.iftm.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.http.HttpStatusCode;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;

import java.util.Optional;

@Service
public class AuthorizationService {

  @Autowired
  private AuthenticationManager authenticationManager;

  @Autowired
  private MongoTemplate mongoTemplate;

  @Autowired
  private TokenService tokenService;

  @Autowired
  UserRepository userRepository;

  @Autowired
  private ClassroomRepository classroomRepository;


  public LoginResponseDTO login(LoginDTO loginDTO) {
    var usernamePassword = new UsernamePasswordAuthenticationToken(loginDTO.getEmail(), loginDTO.getPassword());
    var auth = authenticationManager.authenticate(usernamePassword);
    var token = tokenService.generateToken((User) auth.getPrincipal());

    return LoginResponseDTO.builder()
        .token(token)
        .build();
  }

  public RegisterResponseDTO register(RegisterDTO registerDTO) {
    Optional<User> user = userRepository.findByEmail(registerDTO.getEmail());
    if (user.isPresent()) {
      throw new HttpClientErrorException(HttpStatusCode.valueOf(400), "Email already exists");
    }

    String encryptedPassword = new BCryptPasswordEncoder().encode(registerDTO.getPassword());
    User userObj = initializeUser(registerDTO.withPassword(encryptedPassword));

    User save = userRepository.save(userObj);
    return RegisterResponseDTO.builder()
        .uuid(save.getUuid())
        .email(save.getEmail())
        .name(save.getName())
        .isTeacher(registerDTO.isTeacher())
        .build();
  }

  private User initializeUser(RegisterDTO registerDTO) {
    if (registerDTO.isTeacher()) {
      isValidTeacherEmail(registerDTO.getEmail());
      return new Teacher(
          registerDTO.getName(),
          registerDTO.getEmail(),
          registerDTO.getPassword(),
          true
      );
    }

    verifyClassId(registerDTO.getClassId());
    return new Student(
        registerDTO.getName(),
        registerDTO.getEmail(),
        registerDTO.getPassword(),
        true,
        registerDTO.getClassId()
    );
  }

  private void isValidTeacherEmail(String email) {
    Query query = new Query(Criteria.where("email").is(email));
    if(!mongoTemplate.exists(query, "teacher_mails")) {
      throw new HttpClientErrorException(HttpStatusCode.valueOf(403), "This user cannot register as a teacher");
    }
  }

  private void verifyClassId(String classId) {
    if(classroomRepository.findByUuid(classId).isEmpty()) {
      throw new HttpClientErrorException(HttpStatusCode.valueOf(400), "Invalid class id");
    }
  }
}
package com.nataliaarantes.iftm.service;

import com.nataliaarantes.iftm.model.Classroom;
import com.nataliaarantes.iftm.model.dto.user.Student.StudentResponseDTO;
import com.nataliaarantes.iftm.model.dto.classroom.ClassroomDTO;
import com.nataliaarantes.iftm.model.dto.classroom.ClassroomResponseDTO;
import com.nataliaarantes.iftm.repository.ClassroomRepository;
import com.nataliaarantes.iftm.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatusCode;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;

import java.util.List;
import java.util.Optional;

@Service
public class ClassroomService {

  @Autowired
  private ClassroomRepository classroomRepository;

  @Autowired
  private UserRepository userRepository;


  public ClassroomResponseDTO create(ClassroomDTO classroomDTO) {
    Optional<Classroom> classroom = classroomRepository.findByName(classroomDTO.getName());
    if (classroom.isPresent()) {
      throw new HttpClientErrorException(HttpStatusCode.valueOf(400), "Classroom already exists");
    }

    Classroom model = Classroom.dtoToMode(classroomDTO);
    model = classroomRepository.save(model);

    return ClassroomResponseDTO.modelToResponseDto(model);
  }

  public ClassroomResponseDTO findByUuid(String uuid) {
    Classroom classroom = classroomRepository.findByUuid(uuid)
        .orElseThrow(() -> new HttpClientErrorException(HttpStatusCode.valueOf(404), "Class not found"));

    ClassroomResponseDTO response = ClassroomResponseDTO.modelToResponseDto(classroom);
    List<StudentResponseDTO> students = getAllStudentsByClassroom(uuid);
    return response.withStudents(students);
  }


  public List<ClassroomResponseDTO> findAll() {
    return classroomRepository.findAll().stream()
        .map(classroom -> {
          ClassroomResponseDTO dto = ClassroomResponseDTO.modelToResponseDto(classroom);
          List<StudentResponseDTO> allStudentsByClassroom = getAllStudentsByClassroom(dto.getUuid());

          return dto.withStudents(allStudentsByClassroom);
        })
        .toList();
  }

  public ClassroomResponseDTO update(String uuid, ClassroomDTO dto) {
    Classroom classroom = classroomRepository.findByUuid(uuid)
        .orElseThrow(() -> new HttpClientErrorException(HttpStatusCode.valueOf(404), "Class not found"));

    if (dto.getName() != null) {
      classroom.setName(dto.getName());
    }

    if (dto.getYear() != null) {
      classroom.setYear(dto.getYear());
    }

    classroom = classroomRepository.save(classroom);
    return ClassroomResponseDTO.modelToResponseDto(classroom);
  }

  public void delete(String uuid) {
    Classroom classroom = classroomRepository.findByUuid(uuid)
        .orElseThrow(() -> new HttpClientErrorException(HttpStatusCode.valueOf(404), "Class not found"));

    classroomRepository.delete(classroom);
  }


  private List<StudentResponseDTO> getAllStudentsByClassroom(String uuid) {
    return userRepository.findByClassId(uuid).stream()
        .map(StudentResponseDTO::modelToDto)
        .toList();
  }

}
package com.nataliaarantes.iftm.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

import com.nataliaarantes.iftm.model.User;
import com.nataliaarantes.iftm.model.Student;
import com.nataliaarantes.iftm.repository.UserRepository;

import java.util.Optional;
import java.util.UUID;

@Service
public class OAuth2UserService extends DefaultOAuth2UserService {
    
    @Autowired
    private UserRepository userRepository;
    
    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {
        OAuth2User oauth2User = super.loadUser(userRequest);
        
        // Extrai email da conta Google
        String email = oauth2User.getAttribute("email");
        String name = oauth2User.getAttribute("name");
        
        // Verifica se usuário existe
        Optional<User> userOptional = userRepository.findByEmail(email);
        
        if (userOptional.isEmpty()) {
            // Cria novo usuário se não existir
            Student student = new Student(
                name,
                email,
                UUID.randomUUID().toString(), // Senha aleatória já que usarão Google para login
                true,
                null // Nenhuma turma atribuída inicialmente
            );
            userRepository.save(student);
        }
        
        return oauth2User;
    }
}
package com.nataliaarantes.iftm.service;

import com.nataliaarantes.iftm.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatusCode;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;

@Service
public class SecurityAuthorizationService implements UserDetailsService {
  @Autowired
  UserRepository userRepository;

  @Override
  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
    return userRepository.findByEmail(username).orElseThrow(() -> new HttpClientErrorException(HttpStatusCode.valueOf(404), "User not found"));
  }
}
package com.nataliaarantes.iftm.service;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.nataliaarantes.iftm.model.Student;
import com.nataliaarantes.iftm.model.Teacher;
import com.nataliaarantes.iftm.model.User;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

@Service
public class TokenService {
  @Value("${api.security.token.secret}")
  private String secret;

  public String generateToken(User user){
    try{
      Algorithm algorithm = Algorithm.HMAC256(secret);
      var userInstance = user.getClass();
      String type;
      String classId = "";
      if(userInstance == Teacher.class) {
        type = "teacher";
      } else {
        type = "student";
        classId = ((Student) user).getClassId();
      }

      String token = JWT.create()
          .withIssuer("auth-api")
          .withSubject(user.getEmail())
          .withClaim("uuid", user.getUuid())
          .withClaim("type", type)
          .withClaim("classId", classId)
          .withExpiresAt(genExpirationDate())
          .sign(algorithm);
      return token;
    } catch (JWTCreationException exception) {
      throw new RuntimeException("Error while generating token", exception);
    }
  }

  public String validateToken(String token){
    try {
      Algorithm algorithm = Algorithm.HMAC256(secret);
      return JWT.require(algorithm)
          .withIssuer("auth-api")
          .build()
          .verify(token)
          .getSubject();
    } catch (JWTVerificationException exception){
      return "";
    }
  }

  private Instant genExpirationDate(){
    return LocalDateTime.now().plusHours(2).toInstant(ZoneOffset.of("-03:00"));
  }
}
package com.nataliaarantes.iftm.service;

import com.nataliaarantes.iftm.model.Student;
import com.nataliaarantes.iftm.model.Teacher;
import com.nataliaarantes.iftm.model.User;
import com.nataliaarantes.iftm.model.dto.user.Student.StudentResponseDTO;
import com.nataliaarantes.iftm.model.dto.user.Teacher.TeacherResponseDTO;
import com.nataliaarantes.iftm.model.dto.user.UserDTO;
import com.nataliaarantes.iftm.model.dto.user.UserResponseDTO;
import com.nataliaarantes.iftm.repository.ClassroomRepository;
import com.nataliaarantes.iftm.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatusCode;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;

import java.util.Objects;
import java.util.Optional;

@Service
public class UserService {

  @Autowired
  UserRepository userRepository;

  @Autowired
  ClassroomRepository classroomRepository;

  @Autowired
  TokenService tokenService;


  public UserResponseDTO update(UserDTO dto, String token) {
    String email = tokenService.validateToken(token.replace("Bearer ", ""));
    if(Objects.equals(email, "")) {
      throw new HttpClientErrorException(HttpStatusCode.valueOf(500), "INTERNAL ERROR");
    }

    User user = userRepository.findByEmail(email).orElseThrow(RuntimeException::new);
    boolean isStudent = user.getClass() == Student.class;

    if(dto.getName() != null) {
      user.setName(dto.getName());
    }

    if(dto.getEmail() != null) {
      Optional<User> byEmail = userRepository.findByEmail(dto.getEmail());

      if(byEmail.isPresent()) {
        throw new HttpClientErrorException(HttpStatusCode.valueOf(400), "Email already exists");
      }

      user.setEmail(dto.getEmail());
    }

    if(dto.getPassword() != null) {
      String encryptedPassword = new BCryptPasswordEncoder().encode(dto.getPassword());
      user.setPassword(encryptedPassword);
    }

    if(dto.getClassId() != null && isStudent) {
      classroomRepository.findByUuid(dto.getClassId()).orElseThrow(() -> new HttpClientErrorException(HttpStatusCode.valueOf(400), "Invalid classroom"));
      ((Student) user).setClassId(dto.getClassId());
    }

    user = userRepository.save(user);
    return isStudent ? StudentResponseDTO.modelToDto((Student) user) : TeacherResponseDTO.modelToDto((Teacher) user);
  }
}
package com.nataliaarantes.iftm;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AuthApplication {

	public static void main(String[] args) {
		SpringApplication.run(AuthApplication.class, args);
	}

}
spring.application.name=iftm

# MongoDB
spring.data.mongodb.uri=mongodb+srv://nataliaarantes:Onitorinco23@natalia.hd5cf.mongodb.net/?retryWrites=true&w=majority&appName=Natalia
spring.data.mongodb.database=auth
spring.data.mongodb.authentication-database=admin
spring.data.mongodb.auto-index-creation=true

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email,profile

# JPA
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#Security
api.security.token.secret=iftm-jwt-secret